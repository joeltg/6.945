;(g9 '((x 1))
;    (lambda (data)
;        (let* ((x (square (cadr (assq 'x data))))
;               (y (cadr (assq 'x data)))
;               (radius 10))
;            (define handle1 `((type circle) (radius ,radius) (x ,(* 100 x)) (y ,(* 100 y))))
;            (define handle2 `((type circle) (radius ,radius) (x ,(* 100 x)) (y  0)))
;            (define bar `((type line) (start handle1) (end handle2)))
;            `((bar ,bar) (handle1 ,handle1) (handle2 ,handle2))))
;    js-render
;    (lambda (data)
;      (pp data)))

(define id 0)
(define (drawTree x1 y1 length angle n da dl)
        (let* ((x2 (+ x1 (* length (cos (* angle (/ pi 180))))))
              (y2 (+ y1 (* length (sin (* angle (/ pi 180))))))
              (l (set! id (+ id 1)))
              (c1 (set! id (+ id 1)))
              (c2 (set! id (+ id 1))))
              (if (= n 0)
                '()
                `((,c1 ((type circle) (x ,x1) (y ,y1)))
                  (,c2 ((type circle) (x ,x2) (y ,y2)))
                  (,l ((type line) (start ,c1) (end ,c2)))
                  ,@(drawTree x2 y2 (* length dl) (+ angle da) (- n 1) da dl)
                  ,@(drawTree x2 y2 (* length dl) (- angle da) (- n 1) da dl)))))

(g9 '((dl 0.75) (da 70))
    (lambda (data)
    (set! id 0)
        (let* ((dl (cadr (assq 'dl data)))
               (da (cadr (assq 'da data))))
               (drawTree 350.5 330 100 -90 4 da dl)))
    js-render
    (lambda (data)
      (pp data)))